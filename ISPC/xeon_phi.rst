Xeon Phi ハッカソン
###############################################################################
Xeon Phi ハッカソンでは、ISPCつかって性能測定してきました。

ISPCの概要
===============================================================================
ISPCはIntel SPMD (Single Program Multiple Data) Program Compilerの略称です。

http://ispc.github.io/

OSSで開発されており、バックエンドにLLVMを使用しています。

主にSIMDを搭載したCPUやXeon Phiで効率のよいコードを生成できます。

GPGPUはターゲットにしていませんが、ARM NEONはターゲットになっています。

ISPCはC言語風のISPC言語でkernelを記述し、リンクして実行できます。

問題点として、icpcと名前が似ていてややこしい、
開発者がIntelからGoogleに移籍してしまったなどが挙げられます。

Xeon Phiへの対応
===============================================================================
ISPCはXeon Phiにベータ版ですが対応しています。

ISPCを使用する場合、IPSCでコンパイル後、C++ソースコードでemitし、
icpc -micでリコンパイルする必要があります。

gccはMPSSに対応しているので不明であるため、icpcでリコンパイルするのが良いと思います。

Xeon Phiではnative実行を行いましたが、ソースコードに手を加えればオフロード実行も可能なはず。

MICのオフロード実行用のソースコードを、ISPCから生成可能かどうかは不明です。

ISPCはXeon Phiの512bitのSIMDに対応しており、512bit SIMD向けの拡張クラスを出力します。

Xeon Phiの注意点
===============================================================================
SIMDをきっちり使いきらないと性能はでないのかも。

あまりL2キャッシュ コヒーレントがネックになって性能が出ない。

scalar演算の単体性能では、Xeon PhiはXeon E5-2620の1/10くらい


5000ファミリー
7000ファミリー


MICはring上に並んでいる。

キャッシュのソフトウェアプリフェッチをがつがつ入れたほうがいい。
コンパイラは大量のソフトウェアプリフェッチを挿入するらしい。

ISPCでのコンパイル手順
===============================================================================

ISPCのMIC向けコンパイル手順
===============================================================================

ISPCの測定結果
===============================================================================

ISPCのアーキテクチャ
===============================================================================

ToDO
===============================================================================
ステンシル系の挙動調査

===============================================================================
===============================================================================
===============================================================================
